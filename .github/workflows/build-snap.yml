name: Build Snap

on:
  workflow_call:
    outputs:
      snap:
        description: "Filename of the built snap artifact"
        value: local-${{ jobs.build.outputs.snap }}

jobs:
  build:
    name: Build snap
    runs-on: ubuntu-latest
    outputs:
      snap: ${{ steps.snapcraft.outputs.snap }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build snap locally
        uses: canonical/action-build@v1.3.0
        id: snapcraft

      - name: Upload locally built snap artifact
        uses: actions/upload-artifact@v3
        with:
          name: local-${{ steps.snapcraft.outputs.snap }}
          path: ${{ steps.snapcraft.outputs.snap }}

  functional-test:
    needs: build
    name: Functional test
    runs-on: [self-hosted, large, jammy, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download snap artifact
        id: download
        uses: actions/download-artifact@v3
        with:
          name: local-${{ needs.build.outputs.snap }}
      - name: test
        run: |
          set -x
          export COLUMNS=256
          sudo snap install  ${{ needs.build.outputs.snap }} --dangerous
          openstack.sunbeam prepare-node-script | bash -x
          sudo snap connect openstack:juju-bin juju:juju-bin
          sudo snap connect openstack:dot-local-share-juju
          sudo snap connect openstack:dot-config-openstack
          sudo snap connect openstack:dot-local-share-openstack
          # Even though `--topology single --database single` is not used in the
          # single-node tutorial, explicitly speficy it here to force the single
          # mysql mode.
          # The tutorial assumes ~16 GiB of memory where Sunbeam selects the singe
          # mysql single mysql mode automatically. And self-hosted runners may
          # have more than 32 GiB of memory where Sunbeam selects the multi mysql
          # mode instead. So we have to override the Sunbeam's decision to be
          # closer to the tutorial scenario.
          sg snap_daemon "openstack.sunbeam cluster bootstrap --manifest /snap/openstack/current/etc/manifests/edge.yml --accept-defaults --topology single --database single"
          sg snap_daemon "openstack.sunbeam cluster list"
          # Note: Moving configure before enabling caas just to ensure caas images are not downloaded
          # To download caas image, require ports to open on firewall to access fedora images.
          sg snap_daemon "openstack.sunbeam configure --accept-defaults --openrc demo-openrc"
          sg snap_daemon "openstack.sunbeam launch --name test"
          # The cloud-init process inside the VM takes ~2 minutes to bring up the
          # SSH service after the VM gets ACTIVE in OpenStack
          sleep 300
          source demo-openrc
          openstack console log show --lines 200 test
          demo_floating_ip="$(openstack floating ip list -c 'Floating IP Address' -f value | head -n1)"
          ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i ~/snap/openstack/current/sunbeam "ubuntu@${demo_floating_ip}" true
          sg snap_daemon "openstack.sunbeam enable orchestration"
          sg snap_daemon "openstack.sunbeam enable loadbalancer"
          sg snap_daemon "openstack.sunbeam enable dns --nameservers=testing.github."
          sg snap_daemon "openstack.sunbeam enable telemetry"
          sg snap_daemon "openstack.sunbeam enable observability embedded"
          sg snap_daemon "openstack.sunbeam enable vault"
          sg snap_daemon "openstack.sunbeam enable secrets"
          sg snap_daemon "openstack.sunbeam enable resource-optimization"
          # Disable caas temporarily while MySQL memory gets adjusted
          # sg snap_daemon "openstack.sunbeam enable caas"
          # sg snap_daemon "openstack.sunbeam enable validation"
          # If smoke tests fails, logs should be collected via sunbeam command in "Collect logs"
          # sg snap_daemon "openstack.sunbeam validation run smoke"
          # sg snap_daemon "openstack.sunbeam validation run --output tempest_validation.log"
          # sg snap_daemon "openstack.sunbeam disable caas"
          sg snap_daemon "openstack.sunbeam disable secrets"
          sg snap_daemon "openstack.sunbeam disable vault"
          # Commented disabling observability due to LP#1998282
          # sg snap_daemon "openstack.sunbeam disable observability embedded"
          # sg snap_daemon "openstack.sunbeam disable telemetry"
          sg snap_daemon "openstack.sunbeam disable dns"
          sg snap_daemon "openstack.sunbeam disable loadbalancer"
          sg snap_daemon "openstack.sunbeam disable orchestration"
          sg snap_daemon "openstack.sunbeam disable resource-optimization"
          # sg snap_daemon "openstack.sunbeam disable validation"

          # sg snap_daemon "openstack.sunbeam enable consul"
          sg snap_daemon "openstack.sunbeam enable instance-recovery"
          sg snap_daemon "openstack.sunbeam disable instance-recovery"
          # Disable consul as the pods are stuck in getting terminated
          # sg snap_daemon "openstack.sunbeam disable consul"

      - name: Collect logs
        if: always()
        run: |
          kubectl="microk8s.kubectl"
          mkdir -p logs
          cp -rf $HOME/snap/openstack/common/logs/*.log logs/
          models=$(juju models --format json | jq -r .models[].name)
          for model in $models;
          do 
            name=$(echo $model | cut -d/ -f2);
            juju status -m $model -o logs/$name.yaml;
            cat logs/$name.yaml;
            juju debug-log -m $model --replay &> logs/$name-debug-log.txt || echo "Not able to get logs for model $model"
            for pod in $(sudo $kubectl get pods -n $name -o=jsonpath='{.items[*].metadata.name}');
            do
              sudo $kubectl logs --ignore-errors -n $name --all-containers $pod &> logs/$pod.log || echo "Not able to get log for $pod"
            done
          done
          # if test -f tempest_validation.log; then cp tempest_validation.log logs/; fi
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sunbeam_logs
          path: logs
          retention-days: 30
      - name: Setup tmate session
        if: ${{ failure() && runner.debug }}
        uses: canonical/action-tmate@main
