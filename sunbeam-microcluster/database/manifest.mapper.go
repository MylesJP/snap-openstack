package database

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
	"github.com/canonical/microcluster/cluster"
)

var _ = api.ServerEnvironment{}

var manifestItemObjects = cluster.RegisterStmt(`
SELECT manifest.id, manifest.manifest_id, manifest.applied_date, manifest.data
  FROM manifest
  ORDER BY manifest.manifest_id
`)

var manifestItemObjectsByManifestID = cluster.RegisterStmt(`
SELECT manifest.id, manifest.manifest_id, manifest.applied_date, manifest.data
  FROM manifest
  WHERE ( manifest.manifest_id = ? )
  ORDER BY manifest.manifest_id
`)

var manifestItemID = cluster.RegisterStmt(`
SELECT manifest.id FROM manifest
  WHERE manifest.manifest_id = ?
`)

var manifestItemDeleteByManifestID = cluster.RegisterStmt(`
DELETE FROM manifest WHERE manifest_id = ?
`)

// manifestItemColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the ManifestItem entity.
func manifestItemColumns() string {
	return "manifest.id, manifest.manifest_id, manifest.applied_date, manifest.data"
}

// getManifestItems can be used to run handwritten sql.Stmts to return a slice of objects.
func getManifestItems(ctx context.Context, stmt *sql.Stmt, args ...any) ([]ManifestItem, error) {
	objects := make([]ManifestItem, 0)

	dest := func(scan func(dest ...any) error) error {
		m := ManifestItem{}
		err := scan(&m.ID, &m.ManifestID, &m.AppliedDate, &m.Data)
		if err != nil {
			return err
		}

		objects = append(objects, m)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"manifest\" table: %w", err)
	}

	return objects, nil
}

// getManifestItemsRaw can be used to run handwritten query strings to return a slice of objects.
func getManifestItemsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]ManifestItem, error) {
	objects := make([]ManifestItem, 0)

	dest := func(scan func(dest ...any) error) error {
		m := ManifestItem{}
		err := scan(&m.ID, &m.ManifestID, &m.AppliedDate, &m.Data)
		if err != nil {
			return err
		}

		objects = append(objects, m)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"manifest\" table: %w", err)
	}

	return objects, nil
}

// GetManifestItems returns all available ManifestItems.
// generator: ManifestItem GetMany
func GetManifestItems(ctx context.Context, tx *sql.Tx, filters ...ManifestItemFilter) ([]ManifestItem, error) {
	var err error

	// Result slice.
	objects := make([]ManifestItem, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = cluster.Stmt(tx, manifestItemObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"manifestItemObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.ManifestID != nil {
			args = append(args, []any{filter.ManifestID}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, manifestItemObjectsByManifestID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"manifestItemObjectsByManifestID\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(manifestItemObjectsByManifestID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"manifestItemObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ManifestID == nil {
			return nil, fmt.Errorf("Cannot filter on empty ManifestItemFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getManifestItems(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getManifestItemsRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"manifest\" table: %w", err)
	}

	return objects, nil
}

// GetManifestItem returns the ManifestItem with the given key.
// generator: ManifestItem GetOne
func GetManifestItem(ctx context.Context, tx *sql.Tx, manifestID string) (*ManifestItem, error) {
	filter := ManifestItemFilter{}
	filter.ManifestID = &manifestID

	objects, err := GetManifestItems(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"manifest\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "ManifestItem not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"manifest\" entry matches")
	}
}

// GetManifestItemID return the ID of the ManifestItem with the given key.
// generator: ManifestItem ID
func GetManifestItemID(ctx context.Context, tx *sql.Tx, manifestID string) (int64, error) {
	stmt, err := cluster.Stmt(tx, manifestItemID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"manifestItemID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, manifestID)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "ManifestItem not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"manifest\" ID: %w", err)
	}

	return id, nil
}

// ManifestItemExists checks if a ManifestItem with the given key exists.
// generator: ManifestItem Exists
func ManifestItemExists(ctx context.Context, tx *sql.Tx, manifestID string) (bool, error) {
	_, err := GetManifestItemID(ctx, tx, manifestID)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// DeleteManifestItem deletes the ManifestItem matching the given key parameters.
// generator: ManifestItem DeleteOne-by-ManifestID
func DeleteManifestItem(_ context.Context, tx *sql.Tx, manifestID string) error {
	stmt, err := cluster.Stmt(tx, manifestItemDeleteByManifestID)
	if err != nil {
		return fmt.Errorf("Failed to get \"manifestItemDeleteByManifestID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(manifestID)
	if err != nil {
		return fmt.Errorf("Delete \"manifest\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "ManifestItem not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d ManifestItem rows instead of 1", n)
	}

	return nil
}
